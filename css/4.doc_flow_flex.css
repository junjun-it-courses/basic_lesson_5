/*
    Для того чтобы чтобы управлять потоком нашего документа с помощью CSS нам в первую
    очередь нужно выстроить правильный базовый поток документа в нашем HTML.

    flex

    Задача:
    Необходимо выставить элементы .item друг возле друга по 2 в ряд.


    Решение:

    Для начала выставим ширину элемента 50% и добавим display: flex чтобы
    элементы .item могли выстраиваться друг возле друга
*/


/* В таком случае flex прописываем для родительского элементы */

.wrapper {
    display: flex;
}

.item {
    width: 50%;
}

/*
    У нас появилась проблема, а именно то что сейчас все элементы встроены в ряд,
    это происходит по причине того что flex сам, автоматически пересчитывает ширину
    игнорируя заданную нами ширину для элементов. Для того чтобы это исправить,
    нам необходимо добавить свойство flex-wrap: wrap для родительского элемента
    .wrapper .
*/

.wrapper {
    flex-wrap: wrap;
}

/*
    Теперь мы сами можем контролировать контролировать ширину наших внутренних элементов
    через CSS, но не забывайте, что если вам подходит стандартное поведение flex и его
    автоматическая работа с шириной, то можете игнорировать flex-wrap: wrap
*/


/*
    ------ Другие возможности ------

    Для того чтобы удобно работать с элементами у flex есть ряд других свойств которые
    помогают удобно позиционировать элементы.

    Для наглядности изменю ширину элементов .item
*/

.item {
    width: 18%;
}

/*
    Свойство justify-content помогает нам позиционировать элементы по горизонтали
    Все его значение рассмотрим на странице в браузере.
*/

.wrapper {
    justify-content: space-evenly;
}



/*
    Свойство align-items помогает нам позиционировать элементы по вертикали, для
    наглядности я увеличу высоту блока .wrapper .

    Все его значение рассмотрим на странице в браузере.
*/

.wrapper {
    border-top: 3px solid black;
    border-bottom: 3px solid black;
    background-color: #ccc;
    height: 600px;

    /* flex свойство */
    align-items: center;
}


/*
 Свойство flex-direction определяет в каком направлении будут отображаться элементы.
 по-умолчанию flex-direction равно значению row, в зависимости от направления отображения
 у нас будет изменяться и работа свойств justify-content и align-items


 Для flex-direction: row и row-reverse:
    justify-content - будет позиционировать по горизонтали
    align-items - будет позиционировать по вертикали

 Для flex-direction: column и column-reverse:
    justify-content - будет позиционировать по вертикали
    align-items - будет позиционировать по горизонтали


 Все его значение рассмотрим на странице в браузере.
*/

.wrapper {
    height: initial;

    /* flex свойство */
    flex-direction: row;
}


/*
    Свойство order - позволяет нам, вручную, определять в котором будут отображаться
    элементы. Свойство order должно задаваться внутренним элементам, вложенным в .wrapper,
    а значит тем которые являются детьми первого уровня элемента у которой присутствует
    свойство display: flex.

    В нашем случае это элементы .item так как они является детьми .wrapper у которого и
    прописано свойство display: flex.
*/

.item:nth-child(1) {
    order: 4
}

.item:nth-child(2) {
    order: 1
}

.item:nth-child(3) {
    order: 2
}

.item:nth-child(4) {
    order: 3
}


/*
    Также существует еще больше flex-свойств, которые используются не так часто,
    о них можно почитать в документации.
*/